/* Copyright 2021 REPLACE_WITH_YOUR_NAME
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "quantum.h"

__attribute__((weak)) void matrix_init_user(void);

void amikb_sendkey(unsigned char keycode, int press);
void amikb_wait_for_ack_resync_if_none(void);
void amikb_wait_for_ack_reset_if_none(long timeout);
void wait_for_amiga(long timeout);
void amikb_reset(void);
void hard_reset(void);
void init_timer(void);
void reset_timer(void);
unsigned long get_msec(void);

// ACLK == KCLK == F6
#define ACLK	6
#define ACLK_BIT	(1 << ACLK)

// ADATA == KDAT == F7
#define ADATA	7
#define ADATA_BIT	(1 << ADATA)

#define PIN_CTRL 3
#define CTRL_BIT	(1 << PIN_CTRL)
#define PIN_LAMI 6
#define LAMI_BIT	(1 << PIN_LAMI)
#define PIN_RAMI 2
#define RAMI_BIT	(1 << PIN_RAMI)

#define TIMEOUT_MSEC 143
#define RESET_WARNING_MSEC 250
#define RESET_MSEC 500
#define RESET_WARNING_FULL_MSEC 10000


/*
 * STA3  STA2  STA1  KDAT  KCLK  VCC
 *  F3    F4    F5    F7    F6
 */

#define STA3 F3
#define STA2 F4
#define STA1 F5
#define KDAT F7
#define KCLK F6

#define LAMI B6
#define CTRL B3
#define RAMI B2

#define LAYOUT( \
    K00,      K02, K03, K04, K05,      K07, K08, K09,        \
    K10,      K12, K13, K14, K15,      K17, K18, K19,        \
    K20, K21, K22, K23, K24, K25, K26, K27, K28, K29, K2A,   \
    K30, K31, K32, K33, K34, K35, K36, K37, K38, K39,        \
    K40, K41, K42, K43, K44, K45, K46, K47, K48, K49, K4A,   \
    K50, K51, K52, K53, K54, K55, K56, K57, K58, K59,        \
    K60, K61, K62, K63, K64, K65, K66, K67,                  \
    K70, K71, K72, K73, K74, K75, K76, K77,                  \
    K80, K81, K82, K83, K84, K85, K86, K87, K88,             \
    K90, K91, K92, K93, K94, K95, K96, K97, K98,             \
    KA0, KA1, KA2, KA3, KA4, KA5, KA6,                       \
    KB0, KB1, KB2, KB3, KB4, KB5                             \
) { \
    { K00,   KC_NO, K02,   K03,   K04,   K05,   KC_NO, K07,   K08,   K09,   KC_NO }, \
    { K10,   KC_NO, K12,   K13,   K14,   K15,   KC_NO, K17,   K18,   K19,   KC_NO }, \
    { K20,   K21,   K22,   K23,   K24,   K25,   K26,   K27,   K28,   K29,   K2A   }, \
    { K30,   K31,   K32,   K33,   K34,   K35,   K36,   K37,   K38,   K39,   KC_NO }, \
    { K40,   K41,   K42,   K43,   K44,   K45,   K46,   K47,   K48,   K49,   K4A   }, \
    { K50,   K51,   K52,   K53,   K54,   K55,   K56,   K57,   K58,   K59,   KC_NO }, \
    { K60,   K61,   K62,   K63,   K64,   K65,   K66,   K67,   KC_NO, KC_NO, KC_NO }, \
    { K70,   K71,   K72,   K73,   K74,   K75,   K76,   K77,   KC_NO, KC_NO, KC_NO }, \
    { K80,   K81,   K82,   K83,   K84,   K85,   K86,   K87,   K88,   KC_NO, KC_NO }, \
    { K90,   K91,   K92,   K93,   K94,   K95,   K96,   K97,   K98,   KC_NO, KC_NO }, \
    { KA0,   KA1,   KA2,   KA3,   KA4,   KA5,   KA6,   KC_NO, KC_NO, KC_NO, KC_NO }, \
    { KB0,   KB1,   KB2,   KB3,   KB4,   KB5,   KC_NO, KC_NO, KC_NO, KC_NO, KC_NO }, \
}

// Amiga Keycodes
#define AKC_RST_WARN 0x78
#define AKC_PLP 0x5A
#define AKC_PRP 0x5B
#define AKC_PDV 0x5C
#define AKC_PML 0x5D
#define AKC_P7  0x3D
#define AKC_P8  0x3E
#define AKC_P9  0x3F
#define AKC_PMN 0x4A
#define AKC_P4  0x2D
#define AKC_P5  0x2E
#define AKC_P6  0x2F
#define AKC_PPL 0x5E
#define AKC_P1  0x1D
#define AKC_P2  0x1E
#define AKC_P3  0x1F
#define AKC_PEN 0x43
#define AKC_P0  0x0F
#define AKC_PDT 0x3C

extern unsigned char amiga_keycode_table[MATRIX_ROWS][MATRIX_COLS];

// generated by KBFirmware JSON to QMK Parser
// https://noroadsleft.github.io/kbf_qmk_converter/
